QUESTION: (page 9)
    Alternatively, to compare items in the cart, instead of using Comparator, we can use the Comparable interface and override the compareTo() method. 
    You can refer to the Java docs to see the information of this interface. 
    Suppose we are taking this Comparable interface approach.
        1.	What class should implement the Comparable interface?
        2.	In those classes, how should you implement the compareTo()method be to reflect the ordering that we want?
        3.	Can we have two ordering rules of the item (by title then cost and by cost then title) if we use this Comparable interface approach?
        4.	Suppose the DVDs has a different ordering rule from the other media types, that is by title, then decreasing length, then cost. How would you modify your code to allow this?

ANSWER:
    1. The class that should develop the Comparable interface is the class that contains the object to be compared, in this case, the abstract class “Media”.

    2. To implement the compareTo() method, it is necessary to compare the properties of object. For requests sorted by title then cost, it can be implemented as follows:
    ```java
        @Override 
        public int compareTo(Media other) { 
            if (!this.getTitle().equals(other.getTitle())) { 
                return this.getTitle().compareTo(other.getTitle()); 
            } else { 
                return Double.compare(this.getCost(), other.getCost()); 
            } 
        } 
    '''

    3. No, we can't. With the Comparable interface there can only be one sorting rule for each class  because the compareTo() method only returns an int value.

    4. I can create a separate class for DVD and implement the compareTo() method:
    ```java
        @Override
        public int compareTo(DigitalVideoDisc other) { 
            if (!this.getTitle().equals(other.getTitle())) { 
                return this.getTitle().compareTo(other.getTitle()); 
            } else if (this instanceof DigitalVideoDisc&& other instanceof DigitalVideoDisc) { 
                return Integer.compare(((DigitalVideoDisc) other).getLength(), ((DigitalVideoDisc) this).getLength()); 
            } else { 
                return Double.compare(this.getCost(), other.getCost()); 
            } 
        }
    ``` 

